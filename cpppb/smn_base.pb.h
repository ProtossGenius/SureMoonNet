// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: smn_base.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_smn_5fbase_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_smn_5fbase_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_smn_5fbase_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_smn_5fbase_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_smn_5fbase_2eproto;
namespace smn_base {
class Call;
class CallDefaultTypeInternal;
extern CallDefaultTypeInternal _Call_default_instance_;
class FPkg;
class FPkgDefaultTypeInternal;
extern FPkgDefaultTypeInternal _FPkg_default_instance_;
class Ret;
class RetDefaultTypeInternal;
extern RetDefaultTypeInternal _Ret_default_instance_;
}  // namespace smn_base
PROTOBUF_NAMESPACE_OPEN
template<> ::smn_base::Call* Arena::CreateMaybeMessage<::smn_base::Call>(Arena*);
template<> ::smn_base::FPkg* Arena::CreateMaybeMessage<::smn_base::FPkg>(Arena*);
template<> ::smn_base::Ret* Arena::CreateMaybeMessage<::smn_base::Ret>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace smn_base {

// ===================================================================

class Call :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smn_base.Call) */ {
 public:
  Call();
  virtual ~Call();

  Call(const Call& from);
  Call(Call&& from) noexcept
    : Call() {
    *this = ::std::move(from);
  }

  inline Call& operator=(const Call& from) {
    CopyFrom(from);
    return *this;
  }
  inline Call& operator=(Call&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Call& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Call* internal_default_instance() {
    return reinterpret_cast<const Call*>(
               &_Call_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Call& a, Call& b) {
    a.Swap(&b);
  }
  inline void Swap(Call* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Call* New() const final {
    return CreateMaybeMessage<Call>(nullptr);
  }

  Call* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Call>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Call& from);
  void MergeFrom(const Call& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Call* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smn_base.Call";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_smn_5fbase_2eproto);
    return ::descriptor_table_smn_5fbase_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kDictFieldNumber = 1,
  };
  // bytes msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const void* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 dict = 1;
  void clear_dict();
  ::PROTOBUF_NAMESPACE_ID::int32 dict() const;
  void set_dict(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dict() const;
  void _internal_set_dict(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smn_base.Call)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 dict_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_smn_5fbase_2eproto;
};
// -------------------------------------------------------------------

class Ret :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smn_base.Ret) */ {
 public:
  Ret();
  virtual ~Ret();

  Ret(const Ret& from);
  Ret(Ret&& from) noexcept
    : Ret() {
    *this = ::std::move(from);
  }

  inline Ret& operator=(const Ret& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ret& operator=(Ret&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Ret& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ret* internal_default_instance() {
    return reinterpret_cast<const Ret*>(
               &_Ret_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Ret& a, Ret& b) {
    a.Swap(&b);
  }
  inline void Swap(Ret* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ret* New() const final {
    return CreateMaybeMessage<Ret>(nullptr);
  }

  Ret* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ret>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Ret& from);
  void MergeFrom(const Ret& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ret* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smn_base.Ret";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_smn_5fbase_2eproto);
    return ::descriptor_table_smn_5fbase_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 3,
    kDictFieldNumber = 1,
    kErrFieldNumber = 2,
  };
  // bytes msg = 3;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const void* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 dict = 1;
  void clear_dict();
  ::PROTOBUF_NAMESPACE_ID::int32 dict() const;
  void set_dict(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dict() const;
  void _internal_set_dict(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool Err = 2;
  void clear_err();
  bool err() const;
  void set_err(bool value);
  private:
  bool _internal_err() const;
  void _internal_set_err(bool value);
  public:

  // @@protoc_insertion_point(class_scope:smn_base.Ret)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 dict_;
  bool err_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_smn_5fbase_2eproto;
};
// -------------------------------------------------------------------

class FPkg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smn_base.FPkg) */ {
 public:
  FPkg();
  virtual ~FPkg();

  FPkg(const FPkg& from);
  FPkg(FPkg&& from) noexcept
    : FPkg() {
    *this = ::std::move(from);
  }

  inline FPkg& operator=(const FPkg& from) {
    CopyFrom(from);
    return *this;
  }
  inline FPkg& operator=(FPkg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FPkg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FPkg* internal_default_instance() {
    return reinterpret_cast<const FPkg*>(
               &_FPkg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FPkg& a, FPkg& b) {
    a.Swap(&b);
  }
  inline void Swap(FPkg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FPkg* New() const final {
    return CreateMaybeMessage<FPkg>(nullptr);
  }

  FPkg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FPkg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FPkg& from);
  void MergeFrom(const FPkg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FPkg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smn_base.FPkg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_smn_5fbase_2eproto);
    return ::descriptor_table_smn_5fbase_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kNOFieldNumber = 1,
    kErrFieldNumber = 3,
  };
  // bytes msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const void* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int64 NO = 1;
  void clear_no();
  ::PROTOBUF_NAMESPACE_ID::int64 no() const;
  void set_no(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_no() const;
  void _internal_set_no(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool Err = 3;
  void clear_err();
  bool err() const;
  void set_err(bool value);
  private:
  bool _internal_err() const;
  void _internal_set_err(bool value);
  public:

  // @@protoc_insertion_point(class_scope:smn_base.FPkg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int64 no_;
  bool err_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_smn_5fbase_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Call

// int32 dict = 1;
inline void Call::clear_dict() {
  dict_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Call::_internal_dict() const {
  return dict_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Call::dict() const {
  // @@protoc_insertion_point(field_get:smn_base.Call.dict)
  return _internal_dict();
}
inline void Call::_internal_set_dict(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dict_ = value;
}
inline void Call::set_dict(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dict(value);
  // @@protoc_insertion_point(field_set:smn_base.Call.dict)
}

// bytes msg = 2;
inline void Call::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Call::msg() const {
  // @@protoc_insertion_point(field_get:smn_base.Call.msg)
  return _internal_msg();
}
inline void Call::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:smn_base.Call.msg)
}
inline std::string* Call::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:smn_base.Call.msg)
  return _internal_mutable_msg();
}
inline const std::string& Call::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void Call::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Call::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:smn_base.Call.msg)
}
inline void Call::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:smn_base.Call.msg)
}
inline void Call::set_msg(const void* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:smn_base.Call.msg)
}
inline std::string* Call::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Call::release_msg() {
  // @@protoc_insertion_point(field_release:smn_base.Call.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Call::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:smn_base.Call.msg)
}

// -------------------------------------------------------------------

// Ret

// int32 dict = 1;
inline void Ret::clear_dict() {
  dict_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ret::_internal_dict() const {
  return dict_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ret::dict() const {
  // @@protoc_insertion_point(field_get:smn_base.Ret.dict)
  return _internal_dict();
}
inline void Ret::_internal_set_dict(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dict_ = value;
}
inline void Ret::set_dict(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dict(value);
  // @@protoc_insertion_point(field_set:smn_base.Ret.dict)
}

// bool Err = 2;
inline void Ret::clear_err() {
  err_ = false;
}
inline bool Ret::_internal_err() const {
  return err_;
}
inline bool Ret::err() const {
  // @@protoc_insertion_point(field_get:smn_base.Ret.Err)
  return _internal_err();
}
inline void Ret::_internal_set_err(bool value) {
  
  err_ = value;
}
inline void Ret::set_err(bool value) {
  _internal_set_err(value);
  // @@protoc_insertion_point(field_set:smn_base.Ret.Err)
}

// bytes msg = 3;
inline void Ret::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Ret::msg() const {
  // @@protoc_insertion_point(field_get:smn_base.Ret.msg)
  return _internal_msg();
}
inline void Ret::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:smn_base.Ret.msg)
}
inline std::string* Ret::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:smn_base.Ret.msg)
  return _internal_mutable_msg();
}
inline const std::string& Ret::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void Ret::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Ret::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:smn_base.Ret.msg)
}
inline void Ret::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:smn_base.Ret.msg)
}
inline void Ret::set_msg(const void* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:smn_base.Ret.msg)
}
inline std::string* Ret::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Ret::release_msg() {
  // @@protoc_insertion_point(field_release:smn_base.Ret.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Ret::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:smn_base.Ret.msg)
}

// -------------------------------------------------------------------

// FPkg

// int64 NO = 1;
inline void FPkg::clear_no() {
  no_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FPkg::_internal_no() const {
  return no_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FPkg::no() const {
  // @@protoc_insertion_point(field_get:smn_base.FPkg.NO)
  return _internal_no();
}
inline void FPkg::_internal_set_no(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  no_ = value;
}
inline void FPkg::set_no(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_no(value);
  // @@protoc_insertion_point(field_set:smn_base.FPkg.NO)
}

// bytes msg = 2;
inline void FPkg::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FPkg::msg() const {
  // @@protoc_insertion_point(field_get:smn_base.FPkg.msg)
  return _internal_msg();
}
inline void FPkg::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:smn_base.FPkg.msg)
}
inline std::string* FPkg::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:smn_base.FPkg.msg)
  return _internal_mutable_msg();
}
inline const std::string& FPkg::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void FPkg::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FPkg::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:smn_base.FPkg.msg)
}
inline void FPkg::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:smn_base.FPkg.msg)
}
inline void FPkg::set_msg(const void* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:smn_base.FPkg.msg)
}
inline std::string* FPkg::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FPkg::release_msg() {
  // @@protoc_insertion_point(field_release:smn_base.FPkg.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FPkg::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:smn_base.FPkg.msg)
}

// bool Err = 3;
inline void FPkg::clear_err() {
  err_ = false;
}
inline bool FPkg::_internal_err() const {
  return err_;
}
inline bool FPkg::err() const {
  // @@protoc_insertion_point(field_get:smn_base.FPkg.Err)
  return _internal_err();
}
inline void FPkg::_internal_set_err(bool value) {
  
  err_ = value;
}
inline void FPkg::set_err(bool value) {
  _internal_set_err(value);
  // @@protoc_insertion_point(field_set:smn_base.FPkg.Err)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace smn_base

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_smn_5fbase_2eproto
