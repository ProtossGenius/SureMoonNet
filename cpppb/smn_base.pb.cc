// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: smn_base.proto

#include "smn_base.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace smn_base {
class CallDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Call> _instance;
} _Call_default_instance_;
class RetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Ret> _instance;
} _Ret_default_instance_;
class FPkgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FPkg> _instance;
} _FPkg_default_instance_;
}  // namespace smn_base
static void InitDefaultsscc_info_Call_smn_5fbase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::smn_base::_Call_default_instance_;
    new (ptr) ::smn_base::Call();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::smn_base::Call::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Call_smn_5fbase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Call_smn_5fbase_2eproto}, {}};

static void InitDefaultsscc_info_FPkg_smn_5fbase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::smn_base::_FPkg_default_instance_;
    new (ptr) ::smn_base::FPkg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::smn_base::FPkg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FPkg_smn_5fbase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FPkg_smn_5fbase_2eproto}, {}};

static void InitDefaultsscc_info_Ret_smn_5fbase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::smn_base::_Ret_default_instance_;
    new (ptr) ::smn_base::Ret();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::smn_base::Ret::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ret_smn_5fbase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Ret_smn_5fbase_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_smn_5fbase_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_smn_5fbase_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_smn_5fbase_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_smn_5fbase_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::smn_base::Call, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::smn_base::Call, dict_),
  PROTOBUF_FIELD_OFFSET(::smn_base::Call, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::smn_base::Ret, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::smn_base::Ret, dict_),
  PROTOBUF_FIELD_OFFSET(::smn_base::Ret, err_),
  PROTOBUF_FIELD_OFFSET(::smn_base::Ret, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::smn_base::FPkg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::smn_base::FPkg, no_),
  PROTOBUF_FIELD_OFFSET(::smn_base::FPkg, msg_),
  PROTOBUF_FIELD_OFFSET(::smn_base::FPkg, err_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::smn_base::Call)},
  { 7, -1, sizeof(::smn_base::Ret)},
  { 15, -1, sizeof(::smn_base::FPkg)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::smn_base::_Call_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::smn_base::_Ret_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::smn_base::_FPkg_default_instance_),
};

const char descriptor_table_protodef_smn_5fbase_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016smn_base.proto\022\010smn_base\"!\n\004Call\022\014\n\004di"
  "ct\030\001 \001(\005\022\013\n\003msg\030\002 \001(\014\"-\n\003Ret\022\014\n\004dict\030\001 \001"
  "(\005\022\013\n\003Err\030\002 \001(\010\022\013\n\003msg\030\003 \001(\014\",\n\004FPkg\022\n\n\002"
  "NO\030\001 \001(\003\022\013\n\003msg\030\002 \001(\014\022\013\n\003Err\030\003 \001(\010b\006prot"
  "o3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_smn_5fbase_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_smn_5fbase_2eproto_sccs[3] = {
  &scc_info_Call_smn_5fbase_2eproto.base,
  &scc_info_FPkg_smn_5fbase_2eproto.base,
  &scc_info_Ret_smn_5fbase_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_smn_5fbase_2eproto_once;
static bool descriptor_table_smn_5fbase_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_smn_5fbase_2eproto = {
  &descriptor_table_smn_5fbase_2eproto_initialized, descriptor_table_protodef_smn_5fbase_2eproto, "smn_base.proto", 162,
  &descriptor_table_smn_5fbase_2eproto_once, descriptor_table_smn_5fbase_2eproto_sccs, descriptor_table_smn_5fbase_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_smn_5fbase_2eproto::offsets,
  file_level_metadata_smn_5fbase_2eproto, 3, file_level_enum_descriptors_smn_5fbase_2eproto, file_level_service_descriptors_smn_5fbase_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_smn_5fbase_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_smn_5fbase_2eproto), true);
namespace smn_base {

// ===================================================================

void Call::InitAsDefaultInstance() {
}
class Call::_Internal {
 public:
};

Call::Call()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:smn_base.Call)
}
Call::Call(const Call& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  dict_ = from.dict_;
  // @@protoc_insertion_point(copy_constructor:smn_base.Call)
}

void Call::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Call_smn_5fbase_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dict_ = 0;
}

Call::~Call() {
  // @@protoc_insertion_point(destructor:smn_base.Call)
  SharedDtor();
}

void Call::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Call::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Call& Call::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Call_smn_5fbase_2eproto.base);
  return *internal_default_instance();
}


void Call::Clear() {
// @@protoc_insertion_point(message_clear_start:smn_base.Call)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dict_ = 0;
  _internal_metadata_.Clear();
}

const char* Call::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 dict = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          dict_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Call::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:smn_base.Call)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 dict = 1;
  if (this->dict() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_dict(), target);
  }

  // bytes msg = 2;
  if (this->msg().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:smn_base.Call)
  return target;
}

size_t Call::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:smn_base.Call)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msg());
  }

  // int32 dict = 1;
  if (this->dict() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dict());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Call::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:smn_base.Call)
  GOOGLE_DCHECK_NE(&from, this);
  const Call* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Call>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:smn_base.Call)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:smn_base.Call)
    MergeFrom(*source);
  }
}

void Call::MergeFrom(const Call& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:smn_base.Call)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.dict() != 0) {
    _internal_set_dict(from._internal_dict());
  }
}

void Call::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:smn_base.Call)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Call::CopyFrom(const Call& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:smn_base.Call)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Call::IsInitialized() const {
  return true;
}

void Call::InternalSwap(Call* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(dict_, other->dict_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Call::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Ret::InitAsDefaultInstance() {
}
class Ret::_Internal {
 public:
};

Ret::Ret()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:smn_base.Ret)
}
Ret::Ret(const Ret& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ::memcpy(&dict_, &from.dict_,
    static_cast<size_t>(reinterpret_cast<char*>(&err_) -
    reinterpret_cast<char*>(&dict_)) + sizeof(err_));
  // @@protoc_insertion_point(copy_constructor:smn_base.Ret)
}

void Ret::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Ret_smn_5fbase_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dict_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&err_) -
      reinterpret_cast<char*>(&dict_)) + sizeof(err_));
}

Ret::~Ret() {
  // @@protoc_insertion_point(destructor:smn_base.Ret)
  SharedDtor();
}

void Ret::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Ret::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Ret& Ret::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Ret_smn_5fbase_2eproto.base);
  return *internal_default_instance();
}


void Ret::Clear() {
// @@protoc_insertion_point(message_clear_start:smn_base.Ret)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dict_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&err_) -
      reinterpret_cast<char*>(&dict_)) + sizeof(err_));
  _internal_metadata_.Clear();
}

const char* Ret::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 dict = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          dict_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool Err = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          err_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Ret::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:smn_base.Ret)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 dict = 1;
  if (this->dict() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_dict(), target);
  }

  // bool Err = 2;
  if (this->err() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_err(), target);
  }

  // bytes msg = 3;
  if (this->msg().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:smn_base.Ret)
  return target;
}

size_t Ret::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:smn_base.Ret)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes msg = 3;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msg());
  }

  // int32 dict = 1;
  if (this->dict() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dict());
  }

  // bool Err = 2;
  if (this->err() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ret::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:smn_base.Ret)
  GOOGLE_DCHECK_NE(&from, this);
  const Ret* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Ret>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:smn_base.Ret)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:smn_base.Ret)
    MergeFrom(*source);
  }
}

void Ret::MergeFrom(const Ret& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:smn_base.Ret)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.dict() != 0) {
    _internal_set_dict(from._internal_dict());
  }
  if (from.err() != 0) {
    _internal_set_err(from._internal_err());
  }
}

void Ret::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:smn_base.Ret)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ret::CopyFrom(const Ret& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:smn_base.Ret)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ret::IsInitialized() const {
  return true;
}

void Ret::InternalSwap(Ret* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(dict_, other->dict_);
  swap(err_, other->err_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Ret::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FPkg::InitAsDefaultInstance() {
}
class FPkg::_Internal {
 public:
};

FPkg::FPkg()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:smn_base.FPkg)
}
FPkg::FPkg(const FPkg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ::memcpy(&no_, &from.no_,
    static_cast<size_t>(reinterpret_cast<char*>(&err_) -
    reinterpret_cast<char*>(&no_)) + sizeof(err_));
  // @@protoc_insertion_point(copy_constructor:smn_base.FPkg)
}

void FPkg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FPkg_smn_5fbase_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&no_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&err_) -
      reinterpret_cast<char*>(&no_)) + sizeof(err_));
}

FPkg::~FPkg() {
  // @@protoc_insertion_point(destructor:smn_base.FPkg)
  SharedDtor();
}

void FPkg::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FPkg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FPkg& FPkg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FPkg_smn_5fbase_2eproto.base);
  return *internal_default_instance();
}


void FPkg::Clear() {
// @@protoc_insertion_point(message_clear_start:smn_base.FPkg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&no_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&err_) -
      reinterpret_cast<char*>(&no_)) + sizeof(err_));
  _internal_metadata_.Clear();
}

const char* FPkg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 NO = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool Err = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          err_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FPkg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:smn_base.FPkg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 NO = 1;
  if (this->no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_no(), target);
  }

  // bytes msg = 2;
  if (this->msg().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_msg(), target);
  }

  // bool Err = 3;
  if (this->err() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_err(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:smn_base.FPkg)
  return target;
}

size_t FPkg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:smn_base.FPkg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msg());
  }

  // int64 NO = 1;
  if (this->no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_no());
  }

  // bool Err = 3;
  if (this->err() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FPkg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:smn_base.FPkg)
  GOOGLE_DCHECK_NE(&from, this);
  const FPkg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FPkg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:smn_base.FPkg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:smn_base.FPkg)
    MergeFrom(*source);
  }
}

void FPkg::MergeFrom(const FPkg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:smn_base.FPkg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.no() != 0) {
    _internal_set_no(from._internal_no());
  }
  if (from.err() != 0) {
    _internal_set_err(from._internal_err());
  }
}

void FPkg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:smn_base.FPkg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FPkg::CopyFrom(const FPkg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:smn_base.FPkg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FPkg::IsInitialized() const {
  return true;
}

void FPkg::InternalSwap(FPkg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(no_, other->no_);
  swap(err_, other->err_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FPkg::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace smn_base
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::smn_base::Call* Arena::CreateMaybeMessage< ::smn_base::Call >(Arena* arena) {
  return Arena::CreateInternal< ::smn_base::Call >(arena);
}
template<> PROTOBUF_NOINLINE ::smn_base::Ret* Arena::CreateMaybeMessage< ::smn_base::Ret >(Arena* arena) {
  return Arena::CreateInternal< ::smn_base::Ret >(arena);
}
template<> PROTOBUF_NOINLINE ::smn_base::FPkg* Arena::CreateMaybeMessage< ::smn_base::FPkg >(Arena* arena) {
  return Arena::CreateInternal< ::smn_base::FPkg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
